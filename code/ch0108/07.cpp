/*
 * @Author: allen
 * @Date: 2023-08-11
 *
 * 07:矩阵归零消减序列和
 *
 * 总时间限制: 1000ms 内存限制: 65536kB
 *
 * 描述
 *     给定一个n*n的矩阵（3 <= n <= 100，元素的值都是非负整数）。
 *     通过(n-1)次实施下述过程，可把这个矩阵转换成一个1*1的矩阵。
 *      每次的过程如下：
 *          首先对矩阵进行行归零：即对每一行上的所有元素，都在其原来值的基础上减去该行上的最小值，保证相减后的值仍然是非负整数，且这一行上至少有一个元素的值为0。
 *          接着对矩阵进行列归零：即对每一列上的所有元素，都在其原来值的基础上减去该列上的最小值，保证相减后的值仍然是非负整数，且这一列上至少有一个元素的值为0。
 *          然后对矩阵进行消减：即把n*n矩阵的第二行和第二列删除，使之转换为一个(n-1)*(n-1)的矩阵。
 *          下一次过程，对生成的(n-1)*(n-1)矩阵实施上述过程。
 *      显然，经过(n-1)次上述过程， n*n的矩阵会被转换为一个1*1的矩阵。请求出每次消减前位于第二行第二列的元素的值。


 *
 * 输入
 *     第一行是一个整数n。
        接下来n行，每行有n个正整数，描述了整个矩阵。相邻两个整数间用单个空格分隔。
 *
 * 输出
 *     输出为n行，每行上的整数为对应矩阵归零消减过程中，每次消减前位于第二行第二列的元素的值。
 *
 * 样例输入
 *     3
        1 2 3
        2 3 4
        3 4 5

 *
 * 样例输出
 *     3
        0
        0

 *
 * 提示
 *
 */

#include <iostream>
using namespace std;

int main()
{
    int a[101][101];
    int n, m;
    cin >> n;
    m = n;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            cin >> a[i][j];
        }
    }
    for (int i = 1; i <= n; i++)
    {
        cout << a[2][2] << endl;
        for (int i = 1; i <= m; i++)
        {
            int x = 0x7FFFFFFF;
            for (int j = 1; j <= m; j++)
            {
                x = min(x, a[i][j]);
            }
            for (int j = 1; j <= m; j++)
            {
                a[i][j] -= x;
            }
        }
        for (int i = 1; i <= m; i++)
        {
            int x = 0x7FFFFFFF;
            for (int j = 1; j <= m; j++)
            {
                x = min(x, a[j][i]);
            }

            for (int j = 1; j <= m; j++)
            {
                a[j][i] -= x;
            }
        }
        for (int i = 2; i <= m - 1; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                a[i][j] = a[i + 1][j];
            }
        }

        for (int j = 2; j <= m; j++)
        {
            for (int i = 1; i <= m - 1; i++)
            {
                a[i][j] = a[i][j + 1];
            }
        }

        m--;
    }
}